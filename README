WebSocketServer
Written for Python 2.7

Kevin Cuzner

This is a server meant to run dedicated on a specific port on the host machine.
It provides a method to host multiple WebSocket-based services sorted by
directory and provide a (relatively) easy interface for writing additional
services. This server utilizes the threading library instead of the
multiprocessing library and thus will only ever use one full core on the CPU.
However, seeing as this is a network application, there shouldn't be huge
problems unless a service is doing many complicated things that would cause it
to eat CPU.

Example of operation:
 - WebSocketServer running on port 12345 of the host machine
 - User requests ws://localhost:12345/foo/bar/
 	- WebSocketServer processes the directory and begins looking in its
 	  service tree for a process named foo->bar->ws_service.py. If the service
 	  isn't found, it looks in the physical directory and attempts to include
 	  the ws_service.py file in that directory. If it cannot, a 404 is issued.
 	  Additionally, if file doesn't contain a class Service, a 500 is issued. If
 	  the service is found and started, the WebSocketServer performs a handshake
 	  and passes the incoming socket off to the Service class
 - User requests ws://localhost:12345/foo/bar
 	- Same as above except the server will look for foo->bar.py to find the
 	  Service class 

A service must implement the Services.Service class which is in the form of a
multiprocessing.Process. The class must be named Service. The main method for
the service should reside in the run() method. Services are imported to run as
though they were in the root directory of the server. The service should monitor
the clientConnQueue which is a multiprocessing.Queue. Information for attaching
the service to received clients will be sent up this queue in a 5 item list
which is returned by WebSocketClient.getClientInformation(). Services should use
these 5 values to communicate to and receive from the WebSocket.

Communication to WebSockets is an event based model with an event being fired
when something happens on the client and the data being available in its
received queue. Using a multithreaded approach for handling individual clients
in each Service is discouraged because of the ease of quickly overwhelming the
server resources (imagine 10,000 long lived sockets on a single processes each
with its own thread...lots of resources). WebSockets are managed as a group
in a separate thread in the main server process to eliminate this problem.
Services do not have direct access to the socket object itself due to
complications in transferring sockets between processes. Instead, queues are
used to communicate with the socket indirectly. An added benefit of this is that
the actual WebSockets protocol is handled by the WebSocket managing thread. To
send data to a socket, a WebSocketClient.Transaction object should be pushed
into the sendQueue of the client. Conversely, received transaction objects will
be made available in the recvQueue.

Services may implement any model for managing the clients which are connected to
the service. A suggestion (which may not be the best for all services) is to
create a class which uses the 5 arguments passed through the clientConnQueue in
its constructor and subscribes its own methods to the transaction handling
events in order to keep the socket encapsulated as an object.

The server also provides some limited base classes which can be used to create
an event driven model for a service by way of "subscriptions". This system was
inspired at least partially by the subscription system used in knockoutjs to
create "update" events for normal objects. Services.Subscribable can be
inherited by any class wishing to use the subscription system. Documentation on
the exact usage of this can be found the Subscribable class itself.
